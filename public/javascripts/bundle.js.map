{"version":3,"sources":["webpack:///public/javascripts/bundle.js","webpack:///webpack/bootstrap 0ec1b7806ce8d2eaa6c7","webpack:///./public/javascripts/main.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","registerOnClick","sound","el","document","querySelectorAll","length","addEventListener","request","XMLHttpRequest","open","onerror","alert","send","socket","io","sounds","muteEl","selectEl","speechLogEl","voicesLoaded","window","speechSynthesis","onvoiceschanged","getVoices","forEach","voice","option","createElement","text","name","value","selected","appendChild","on","soundList","reduce","Audio","data","msg","message","msgVoice","checked","utterance","SpeechSynthesisUtterance","filter","speak","Date","toLocaleTimeString","play","console","error"],"mappings":"CAAS,SAAUA,GCInB,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAE,OAGA,IAAAC,GAAAF,EAAAD,IACAE,WACAE,GAAAJ,EACAK,QAAA,EAUA,OANAP,GAAAE,GAAAM,KAAAH,EAAAD,QAAAC,IAAAD,QAAAH,GAGAI,EAAAE,QAAA,EAGAF,EAAAD,QAvBA,GAAAD,KAqCA,OATAF,GAAAQ,EAAAT,EAGAC,EAAAS,EAAAP,EAGAF,EAAAU,EAAA,GAGAV,EAAA;;;ADSM,SAASI,EAAQD,GEWvB,QAAAQ,GAAAC,GAEA,GAAAC,GAAAC,SAAAC,iBAAA,gBAAAH,EAAA,KAGAC,GAAAG,QACAH,EAAA,GAAAI,iBAAA,mBACA,GAAAC,GAAA,GAAAC,eACAD,GAAAE,KAAA,iBAAAR,GAAA,GACAM,EAAAG,QAAA,WACAC,MAAA,4BAEAJ,EAAAK,SAtEA,GAAAC,GAAAC,KACAC,KACAC,EAAAb,SAAAC,iBAAA,YAEAa,GADAd,SAAAC,iBAAA,oBACAD,SAAAC,iBAAA,qBACAc,EAAAf,SAAAC,iBAAA,2BACAe,GAAA,CAGAC,QAAAC,gBAAAC,gBAAA,WACAH,IAEAA,GAAA,EACAC,OAAAC,gBAAAE,YAAAC,QAAA,SAAAC,GACA,GAAAC,GAAAvB,SAAAwB,cAAA,SACAD,GAAAE,KAAAH,EAAAI,KACAH,EAAAI,MAAAL,EAAAI,KACAH,EAAAK,SAAAN,aACAR,EAAAe,YAAAN,OAIAb,EAAAoB,GAAA,gBAAAC,GAEAnB,EAAAmB,EAAAC,OAAA,SAAApB,EAAAd,GAGA,MAFAc,GAAAd,GAAA,GAAAmC,OAAA,WAAAnC,EAAA,QACAD,EAAAC,GACAc,GACGA,KAGHF,EAAAoB,GAAA,kBAAAI,GACA,GAAAC,GAAAD,EAAAE,QACAC,EAAAH,EAAAZ,KAEA,IAAAa,EAAAjC,OAAA,CAEA,IAAAW,EAAAyB,QAAA,CACA,GAAAC,GAAA,GAAAC,0BAAAL,EACAI,GAAAjB,MAAAJ,gBACAE,YACAqB,OAAA,SAAAnB,GACA,MAAAA,GAAAI,OAAAW,IACyB,GACzBpB,OAAAC,gBAAAwB,MAAAH,GAGAxB,EAAAY,MAAAZ,EAAAY,MAAA,IAAAU,EAAA,QAAAM,OAAAC,qBAAA,KAAAT,EAAA,QAGAzB,EAAAoB,GAAA,gBAAAhC,GACA,MAAAc,GAAAd,QAEAe,EAAAyB,SAEA1B,EAAAd,GAAA+C,QAJAC,QAAAC,MAAA,kBAAAjD","file":"./public/javascripts/bundle.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/*!************************************!*\\\n  !*** ./public/javascripts/main.js ***!\n  \\************************************/\n/***/ function(module, exports) {\n\n\tvar socket = io();\n\tvar sounds = {};\n\tvar muteEl = document.querySelectorAll('.mute')[0];\n\tvar speechEl = document.querySelectorAll('.input-speech')[0];\n\tvar selectEl = document.querySelectorAll('.select-voice')[0];\n\tvar speechLogEl = document.querySelectorAll('.textarea-speech-log')[0];\n\tvar voicesLoaded = false;\n\t\n\t// wait on voices to be loaded before fetching list (loaded async)\n\twindow.speechSynthesis.onvoiceschanged = function() {\n\t  if (voicesLoaded) return;\n\t\n\t  voicesLoaded = true;\n\t  window.speechSynthesis.getVoices().forEach(function(voice) {\n\t    var option = document.createElement(\"option\");\n\t    option.text = voice.name;\n\t    option.value = voice.name;\n\t    option.selected = voice.default;\n\t    selectEl.appendChild(option);\n\t  });\n\t};\n\t\n\tsocket.on('load', function(soundList) {\n\t  // Build sound dictionary (String -> Audio)\n\t  sounds = soundList.reduce(function(sounds, sound) {\n\t    sounds[sound] = new Audio('/sounds/' + sound + '.mp3');\n\t    registerOnClick(sound);\n\t    return sounds;\n\t  }, sounds);\n\t});\n\t\n\tsocket.on('speech', function(data) {\n\t  var msg = data.message;\n\t  var msgVoice = data.voice;\n\t\n\t  if (!msg.length) return;\n\t\n\t  if (!muteEl.checked) {\n\t    var utterance = new SpeechSynthesisUtterance(msg);\n\t    utterance.voice = speechSynthesis\n\t                        .getVoices()\n\t                        .filter(function(voice) {\n\t                          return voice.name === msgVoice;\n\t                        })[0];\n\t    window.speechSynthesis.speak(utterance);\n\t  }\n\t\n\t  speechLogEl.value = speechLogEl.value + '(' + msgVoice + ' ' + new Date().toLocaleTimeString() + ') ' + msg + '\\n';\n\t});\n\t\n\tsocket.on('play', function(sound) {\n\t  if (!sounds[sound]) return console.error('Missing sound: ' + sound);\n\t\n\t  if (muteEl.checked) return;\n\t\n\t  sounds[sound].play();\n\t});\n\t\n\tfunction registerOnClick(sound) {\n\t  // Grab button element\n\t  var el = document.querySelectorAll('[data-sound=\"' + sound + '\"]');\n\t\n\t  // Register click handler\n\t  if (el.length) {\n\t    el[0].addEventListener('click', function() {\n\t      var request = new XMLHttpRequest();\n\t      request.open('GET', '/sounds/' + sound, true);\n\t      request.onerror = function() {\n\t        alert('Could not reach server!');\n\t      };\n\t      request.send();\n\t    });\n\t  }\n\t}\n\t\n\tvar speech = function() {\n\t  event.preventDefault();\n\t  var msg = speechEl.value;\n\t  speechEl.value = '';\n\t  var request = new XMLHttpRequest();\n\t  request.open('POST', '/speech', true);\n\t  request.setRequestHeader('Content-Type', 'application/json');\n\t  request.send(JSON.stringify({ message: msg, voice: selectEl.value }));\n\t};\n\n\n/***/ }\n/******/ ]);\n\n\n/** WEBPACK FOOTER **\n ** public/javascripts/bundle.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 0ec1b7806ce8d2eaa6c7\n **/","var socket = io();\nvar sounds = {};\nvar muteEl = document.querySelectorAll('.mute')[0];\nvar speechEl = document.querySelectorAll('.input-speech')[0];\nvar selectEl = document.querySelectorAll('.select-voice')[0];\nvar speechLogEl = document.querySelectorAll('.textarea-speech-log')[0];\nvar voicesLoaded = false;\n\n// wait on voices to be loaded before fetching list (loaded async)\nwindow.speechSynthesis.onvoiceschanged = function() {\n  if (voicesLoaded) return;\n\n  voicesLoaded = true;\n  window.speechSynthesis.getVoices().forEach(function(voice) {\n    var option = document.createElement(\"option\");\n    option.text = voice.name;\n    option.value = voice.name;\n    option.selected = voice.default;\n    selectEl.appendChild(option);\n  });\n};\n\nsocket.on('load', function(soundList) {\n  // Build sound dictionary (String -> Audio)\n  sounds = soundList.reduce(function(sounds, sound) {\n    sounds[sound] = new Audio('/sounds/' + sound + '.mp3');\n    registerOnClick(sound);\n    return sounds;\n  }, sounds);\n});\n\nsocket.on('speech', function(data) {\n  var msg = data.message;\n  var msgVoice = data.voice;\n\n  if (!msg.length) return;\n\n  if (!muteEl.checked) {\n    var utterance = new SpeechSynthesisUtterance(msg);\n    utterance.voice = speechSynthesis\n                        .getVoices()\n                        .filter(function(voice) {\n                          return voice.name === msgVoice;\n                        })[0];\n    window.speechSynthesis.speak(utterance);\n  }\n\n  speechLogEl.value = speechLogEl.value + '(' + msgVoice + ' ' + new Date().toLocaleTimeString() + ') ' + msg + '\\n';\n});\n\nsocket.on('play', function(sound) {\n  if (!sounds[sound]) return console.error('Missing sound: ' + sound);\n\n  if (muteEl.checked) return;\n\n  sounds[sound].play();\n});\n\nfunction registerOnClick(sound) {\n  // Grab button element\n  var el = document.querySelectorAll('[data-sound=\"' + sound + '\"]');\n\n  // Register click handler\n  if (el.length) {\n    el[0].addEventListener('click', function() {\n      var request = new XMLHttpRequest();\n      request.open('GET', '/sounds/' + sound, true);\n      request.onerror = function() {\n        alert('Could not reach server!');\n      };\n      request.send();\n    });\n  }\n}\n\nvar speech = function() {\n  event.preventDefault();\n  var msg = speechEl.value;\n  speechEl.value = '';\n  var request = new XMLHttpRequest();\n  request.open('POST', '/speech', true);\n  request.setRequestHeader('Content-Type', 'application/json');\n  request.send(JSON.stringify({ message: msg, voice: selectEl.value }));\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./public/javascripts/main.js\n ** module id = 0\n ** module chunks = 0\n **/"],"sourceRoot":""}